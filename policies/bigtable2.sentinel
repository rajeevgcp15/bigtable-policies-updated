import "tfplan-functions" as plan
import "strings"
import "types"

allBigtableInstances = plan.find_resources("google_bigtable_instance")
bigtable_allowed_region = ["us-central1", "us-east1"]
messages_bt_cluster_main = {}

bigtable_instance_classification_map = {}
for allBigtableInstances as address, rc {
	bigtable_instance_name = plan.evaluate_attribute(rc, "name")
	is_bigtable_instance_prod = rule { bigtable_instance_name contains "prod" and bigtable_instance_name not contains "nonprod" }
	if is_bigtable_instance_prod {
		bigtable_instance_classification_map[bigtable_instance_name] = "prod"
	} else {
		bigtable_instance_classification_map[bigtable_instance_name] = "non-prod"
	}
}

print("Bigtable_instance_name_prod_map :==> " + plan.to_string(bigtable_instance_classification_map))

bt_cluster_zone_map_func = func(address, rc, bt_instance_name) {

	bt_cluster = plan.evaluate_attribute(rc.change.after, "cluster")
	bt_cluster_zone_map = {}
	for bt_cluster as add, rt {
		cluster_id = plan.evaluate_attribute(rt, "cluster_id")
		cluster_zone = plan.evaluate_attribute(rt, "zone")
		if (types.type_of(cluster_zone) is "undefined" or types.type_of(cluster_zone) is "null") {
			print("Print Define Zone for the Bigtable cluster with Cluster_ID : " + cluster_id + " for resource " + address)
			print("Zone Can't be null")
			messages_bt_cluster_main[address] = rc

		} else {
			bt_cluster_zone_map[cluster_id] = cluster_zone
		}
	}
	return bt_cluster_zone_map

}

allowed_region_func = func(unique_region_array, region_array, messages_bt, address, rc) {

	for unique_region_array as lp, rs {
		if rs not in bigtable_allowed_region {
			print("Please select region from allowed regions for resource " + address + " .Allowed regions are: " + plan.to_string(bigtable_allowed_region))
			print("Your Selected regions are : " + plan.to_string(region_array))
			messages_bt[address] = rc
		}
	}
	return null
}

prod_func = func(address, rc, bt_instance_name) {
	messages_bt = {}
	bt_cluster_zone_map = bt_cluster_zone_map_func(address, rc, bt_instance_name)
	//print("bt_cluster_zone_map:==>" + plan.to_string(bt_cluster_zone_map))
	cluster_count = 0
	unique_locations_count = 0
	locations = []
	region_array = []
	unique_region_array = []
	region_count_map = {}
	for bt_cluster_zone_map as ad, rt {
		region_map = strings.split(rt, "-")
		region = region_map[0] + "-" + region_map[1]
		append(region_array, region)
		cluster_count = cluster_count + 1
		for region_array as add, rtt {
			if rtt not in unique_region_array {
				append(unique_region_array, rtt)
			}

		}
		if rt not in locations {
			append(locations, rt)
			unique_locations_count = unique_locations_count + 1
		}

	}
	reg_count = 0
	for region_array as ll, rr {
		if rr in region_array {
			x = region_count_map[rr]
			is_x_undefined = rule { types.type_of(x) is "undefined" }
			if is_x_undefined {
				x = 0
			}
			region_count_map[rr] = x + 1
		}
	}
	//print("locations :===>" + plan.to_string(locations))
	//print("Unique locations count :===>" + plan.to_string(unique_locations_count))
	//print("Region_Array :===>" + plan.to_string(region_array))
	print("Cluster Count :===>" + plan.to_string(cluster_count))
	print("Unique Region Array :===>" + plan.to_string(unique_region_array))
	print("Region Count Map :===>" + plan.to_string(region_count_map))

	if (cluster_count < 4) {
		print("Please Define minimum 4 clusters for resource : " + address + " For High Availability for PROD Instance")
		messages_bt[address] = rc

	} else if (cluster_count >= 4) {

		region_length = length(keys(region_count_map))
		region_values = values(region_count_map)
		print("region_length :==>" + plan.to_string(region_length))
		print("region map values :==> " + plan.to_string(region_values))

		temp = 0
		for region_values as a, b {
			for region_values as x, y {
				if (region_values[a] < region_values[x]) {
					temp = region_values[a]
					region_values[a] = region_values[x]
					region_values[x] = temp

				}
			}
		}
		print("Sorted Region_values : ==> " + plan.to_string(region_values))
		if (length(unique_region_array) < 2) {
			print("Please Select Minimum 2 regions for clusters for resource : " + address + " For High Availability")
			print("Your Region counts are :" + plan.to_string(region_count_map))
			print("And your selected zones are : " + plan.to_string(locations))
			messages_bt[address] = rc

		} else if ((region_values[-1] - region_values[0] > 1)) {
			print("Please distribute clusters evenly across regions/zones")
			print("Your Region counts are :" + plan.to_string(region_count_map))
			messages_bt[address] = rc
		} else {
			call_allowed_region_function = allowed_region_func(unique_region_array, region_array, messages_bt, address, rc)
		}

	}
	return messages_bt

}

non_prod_func = func(address, rc, bt_instance_name) {
	print("Called Non-Prod Func:==> " + address)
	messages_bt_non_prod = {}
	bt_cluster_zone_map_non_prod = bt_cluster_zone_map_func(address, rc, bt_instance_name)
	print("bt_cluster_zone_map:==>" + plan.to_string(bt_cluster_zone_map_non_prod))
	cluster_count = 0
	unique_locations_count = 0
	locations = []
	region_array = []
	unique_region_array = []
	for bt_cluster_zone_map_non_prod as ad, rt {
		region_map = strings.split(rt, "-")
		region = region_map[0] + "-" + region_map[1]
		append(region_array, region)
		cluster_count = cluster_count + 1
		if rt not in locations {
			append(locations, rt)
			unique_locations_count = unique_locations_count + 1
		}

	}
	print("locations :===>" + plan.to_string(locations))
	print("Unique locations count :===>" + plan.to_string(unique_locations_count))
	print("Region_Array :===>" + plan.to_string(region_array))
	print("Cluster Count :===>" + plan.to_string(cluster_count))

	if (cluster_count < 2) {
		print("Please Define one more cluster for resource : " + address + " For High Availability")
		messages_bt_non_prod[address] = rc
	} else if (cluster_count >= 2) {
		if (cluster_count > unique_locations_count) {
			print("Please Select different locations for clusters for resource : " + address + " For High Availability")
			messages_bt_non_prod[address] = rc
		} else {
			for region_array as lpp, rttt {
				if rttt not in bigtable_allowed_region {
					print("Please select region from allowed regions for resource " + address + " .Allowed regions are: " + plan.to_string(bigtable_allowed_region))
					print("Your Selected regions are : " + plan.to_string(region_array))
					messages_bt_non_prod[address] = rc

				}
			}
		}
	}
	return messages_bt_non_prod

}
msgs = {}
call_prod_func = {}
call_non_prod_func = {}
for allBigtableInstances as address, rc {
	bt_instance_name = plan.evaluate_attribute(rc, "name")
	if bigtable_instance_classification_map[bt_instance_name] == "prod" {
		call_prod_func = prod_func(address, rc, bt_instance_name)
	} else {
		call_non_prod_func = non_prod_func(address, rc, bt_instance_name)
	}
	msgs = length(call_prod_func) + length(call_non_prod_func) + length(messages_bt_cluster_main)
}

GCP_BT_HA_PROD_BT_MULTI_ZONE = rule { msgs is 0 }
main = rule { GCP_BT_HA_PROD_BT_MULTI_ZONE }
